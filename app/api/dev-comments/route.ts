import { NextRequest, NextResponse } from 'next/server';

interface DevComment {
  id: string;
  author: string;
  message: string;
  timestamp: number;
  avatar?: string;
  mood: 'excited' | 'tired' | 'focused' | 'coffee' | 'debugging';
}

// –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const devComments: DevComment[] = [
  {
    id: '1',
    author: '–í–∞–¥–∏–º',
    message: '–§–∏–∫—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º! üêõ',
    timestamp: Date.now() - 1000 * 60 * 5,
    avatar: 'üë®‚Äçüíª',
    mood: 'debugging'
  },
  {
    id: '2',
    author: '–ê–Ω–Ω–∞',
    message: '–î–æ–±–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä—É—Ç–æ! ‚ú®',
    timestamp: Date.now() - 1000 * 60 * 15,
    avatar: 'üë©‚Äçüé®',
    mood: 'excited'
  },
  {
    id: '3',
    author: '–ú–∞–∫—Å–∏–º',
    message: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–ø–µ—Ä—å –ª–µ—Ç–∞–µ—Ç! üöÄ',
    timestamp: Date.now() - 1000 * 60 * 30,
    avatar: '‚ö°',
    mood: 'focused'
  },
  {
    id: '4',
    author: '–ï–ª–µ–Ω–∞',
    message: '–£–∂–µ 3-—è —á–∞—à–∫–∞ –∫–æ—Ñ–µ... –Ω–æ –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏! ‚òï',
    timestamp: Date.now() - 1000 * 60 * 45,
    avatar: '‚òï',
    mood: 'coffee'
  },
  {
    id: '5',
    author: '–î–º–∏—Ç—Ä–∏–π',
    message: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ üí™',
    timestamp: Date.now() - 1000 * 60 * 60,
    avatar: 'üîß',
    mood: 'focused'
  },
  {
    id: '6',
    author: '–°–æ—Ñ—å—è',
    message: '–î–∏–∑–∞–π–Ω –≥–æ—Ç–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é! üéØ',
    timestamp: Date.now() - 1000 * 60 * 75,
    avatar: 'üé®',
    mood: 'excited'
  }
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
interface SourceStats {
  [key: string]: number;
}

const sourceStats: SourceStats = {};

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const source = searchParams.get('source') || 'direct';
  const action = searchParams.get('action') || 'get-comments';
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
  if (action === 'track-source') {
    sourceStats[source] = (sourceStats[source] || 0) + 1;
    
    return NextResponse.json({
      success: true,
      tracked: source,
      totalSources: Object.keys(sourceStats).length,
      stats: sourceStats
    });
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  if (action === 'get-comments') {
    const page = parseInt(searchParams.get('page') || '0');
    const limit = parseInt(searchParams.get('limit') || '3');
    
    const startIndex = page * limit;
    const endIndex = startIndex + limit;
    const paginatedComments = devComments.slice(startIndex, endIndex);
    
    return NextResponse.json({
      comments: paginatedComments,
      total: devComments.length,
      page,
      hasMore: endIndex < devComments.length,
      sourceStats: Object.keys(sourceStats).length > 0 ? sourceStats : null
    });
  }
  
  return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { author, message, mood = 'focused' } = body;
    
    if (!author || !message) {
      return NextResponse.json(
        { error: 'Author and message are required' },
        { status: 400 }
      );
    }
    
    const newComment: DevComment = {
      id: Date.now().toString(),
      author,
      message,
      timestamp: Date.now(),
      avatar: mood === 'coffee' ? '‚òï' : mood === 'debugging' ? 'üêõ' : 'üë®‚Äçüíª',
      mood
    };
    
    devComments.unshift(newComment);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (devComments.length > 20) {
      devComments.splice(20);
    }
    
    return NextResponse.json({
      success: true,
      comment: newComment,
      total: devComments.length
    });
  } catch (error) {
    return NextResponse.json(
      { error: 'Invalid JSON' },
      { status: 400 }
    );
  }
}
